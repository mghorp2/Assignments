summary(Auto_model)
Auto_inter <- lm(mpg ~ .+ weight:horsepower, Auto[,-9])
summary(Auto_inter)
Auto_inter <- lm(mpg ~ .+ displacement:horsepower, Auto[,-9])
summary(Auto_inter)
Auto_inter <- lm(mpg ~ .+ acceleration:horsepower, Auto[,-9])
summary(Auto_inter)
Auto_inter <- lm(mpg ~ .+ acceleration:displacement, Auto[,-9])
summary(Auto_inter)
Auto_inter <- lm(mpg ~ .+ acceleration:displacement+Weight:year, Auto[,-9])
summary(Auto_inter)
Auto_inter <- lm(mpg ~ .+ acceleration:displacement+ Weight:year, Auto[,-9])
summary(Auto_inter)
Auto_inter <- lm(mpg ~ .+Weight:year, Auto[,-9])
summary(Auto_inter)
Auto_inter <- lm(mpg ~ .+weight*year, Auto[,-9])
summary(Auto_inter)
Auto_inter <- lm(mpg ~ .+weight:year, Auto[,-9])
summary(Auto_inter)
Auto_inter <- lm(mpg ~ .+weight*year+displacement:acceleration, Auto[,-9])
summary(Auto_inter)
Auto_inter <- lm(mpg ~ .+acceleration*year+displacement:acceleration, Auto[,-9])
summary(Auto_inter)
plot(Auto_inter)
Auto_inter <- lm(mpg ~ .+weight*year+displacement:acceleration+cylinders:displacement, Auto[,-9])
summary(Auto_inter)
Auto_inter <- lm(mpg ~ .+weight*year+cylinders:displacement, Auto[,-9])
summary(Auto_inter)
Auto_inter <- lm(mpg ~ .+weight*year+horsepower:acceleration+cylinders:displacement, Auto[,-9])
summary(Auto_inter)
plot(Auto$mpg,Auto[,2:8])
abline(Auto_model)
plot(Auto$mpg,Auto[,3:4])
abline(Auto_model)
plot(Auto$mpg,Auto[,2:3])
abline(Auto_model)
# studing the interaction effect
Auto_inter <- lm(mpg ~ .+weight*year+horsepower:acceleration+cylinders:displacement, Auto[,-9])
summary(Auto_inter)
Auto_trans <- lm(mpg ~ .+log(weight)+e^acceleration+log(displacement), Auto[,-9])
summary(Auto_trans)
Auto_trans <- lm(mpg ~ .+log(weight)+I(e^acceleration)+log(displacement), Auto[,-9])
summary(Auto_trans)
Auto_trans <- lm(mpg ~ .+log(weight)+I(acceleration^2)+log(displacement), Auto[,-9])
summary(Auto_trans)
Auto_trans <- lm(mpg ~ .+log(weight)+I(acceleration^2)+poly(displacement,3), Auto[,-9])
summary(Auto_trans)
Auto_trans <- lm(mpg ~ .+log(weight)+I(acceleration^2)+poly(weight,3), Auto[,-9])
summary(Auto_trans)
Auto_trans <- lm(mpg ~ .+log(weight)+I(acceleration^3), Auto[,-9])
summary(Auto_trans)
Auto_trans <- lm(mpg ~ .+poly(weight,3)+I(acceleration^2), Auto[,-9])
summary(Auto_trans)
Auto_trans <- lm(mpg ~ .+log(weight,3)+poly(acceleration^3), Auto[,-9])
summary(Auto_trans)
Auto_trans <- lm(mpg ~ .+log(weight,3)+poly(acceleration,3), Auto[,-9])
summary(Auto_trans)
Auto_trans <- lm(mpg ~ .+log(weight,3)+I(acceleration,2)+I(displacement,0.5), Auto[,-9])
summary(Auto_trans)
Auto_trans <- lm(mpg ~ .+log(weight,3)+I(acceleration,2)+I(displacement,0.5), Auto[,-9])
summary(Auto_trans)
Auto_trans <- lm(mpg ~ .+log(weight,3)+I(acceleration,2)+I(displacement,0.5), Auto[,-9])
summary(Auto_trans)
Auto_trans <- lm(mpg ~ .+log(weight,3)+I(acceleration,2)+sqrt(displacement), Auto[,-9])
summary(Auto_trans)
Auto_trans <- lm(mpg ~ .+log(weight,3)+I(acceleration,2)+log(displacement), Auto[,-9])
summary(Auto_trans)
Auto_trans <- lm(mpg ~ .+log(weight,3)+I(acceleration,2), Auto[,-9])
summary(Auto_trans)
Auto_inter <- lm(mpg ~ .+weight*year+horsepower:acceleration+cylinders:displacement, Auto[,-9])
summary(Auto_inter)
Auto_trans <- lm(mpg ~ .+log(weight,3)+I(acceleration,2), Auto[,-9])
summary(Auto_trans)
Auto_trans <- lm(mpg ~ .+log(weight)+I(acceleration^2)+log(displacement), Auto[,-9])
summary(Auto_trans)
Auto_trans <- lm(mpg ~ .+log(weight)+I(acceleration^2)+poly(displacement,4), Auto[,-9])
summary(Auto_trans)
Auto_trans <- lm(mpg ~ .+log(weight)+I(acceleration^2)+sqrt(displacement), Auto[,-9])
summary(Auto_trans)
Auto_trans <- lm(mpg ~ cylinder+log(displacement)+horsepower+weight+log(weight)+I(acceleration^2)+year+origin, Auto[,-9])
summary(Auto_trans)
Auto_trans <- lm(mpg ~ .+log(weight)+I(acceleration^2), Auto[,-9])
summary(Auto_trans)
plot(Auto_trans)
# Read Dataset
library(readr)
zip_test <- read_delim("D:/UIC/Fall 2017/Advance stats/Assignments/Assignment1/zip.test.gz",
" ", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(zip_test)
library(readr)
zip_train <- read_delim("D:/UIC/Fall 2017/Advance stats/Assignments/Assignment1/zip.train.gz",
" ", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(zip_train)
zip_train <- zip_train[,1:257]    # cleaning the data
zipTrain <- subset(zip_train,subset=X1%in%c(2,3)) #Considering 2's and 3's
View(zipTrain)
zipTest <- subset(zip_test,subset=X1%in%c(2,3))   #Considering 2's and 3's
view(zipTest)
# Part 1: Linear Regresion
cor(zipTrain)
zip_Model <- lm(X1 ~ ., zipTrain) # Linear Regression model
summary(zip_Model)
par(mfrow = c(2,2))
plot(zip_Model)
X1_pred_train<- predict(zip_Model, zipTrain)
X1_actual_train = zipTrain$X1
print(X1_pred_train)
table(X1_pred_train,zipTrain$X1)
X1pred<-Round(X1_pred_train)
table(X1pred,zipTrain$X1)
X1pred<-round(X1_pred_train)
table(X1pred,zipTrain$X1)
X1_train <- sqrt(mean((X1_actual_train - X1_pred_train)^2)) #RMSE Training
print(X1_train)
print(zip_Model$coefficients)
?apply
library(class)
knn_1_train<-knn(train=zipTrain[,2:257],test=zipTrain[,2:257],cl = as.factor(zipTrain$X1),k=1) # Knn model for K=1
knn_1_pred <- as.numeric(as.character(knn_1_train))
knn_act = zipTrain$X1
RMSE_1_train <- sqrt(mean((knn_act - knn_1_pred)^2)) #RMSE Training for K=1
print(RMSE_1_train)
knn_1<-knn(train=zipTrain[,2:257],test=zipTest[,2:257],cl = as.factor(zipTrain$X1),k=1) # Knn model for K=1
knn_1_predict <- as.numeric(as.character(knn_1))
knn_actual = zipTest$X1
RMSE_1_test <- mean(knn_actual != knn_1_predict) #RMSE Test for K=1
print(RMSE_1_test)
print(knn_1)
summary(knn_1)
cor(zipTrain)
zip_Model <- lm(X1 ~ ., zipTrain) # Linear Regression model
print(zip_Model$coefficients)
summary(zip_Model)
par(mfrow = c(2,2))
plot(zip_Model)
X1_pred_train<- predict(zip_Model, zipTrain)
X1_actual_train = zipTrain$X1
table(X1pred,zipTrain$X1)  # plotting confusion matrix
X1_train <- sqrt(mean((X1_actual_train - X1_pred_train)^2)) #RMSE Training
print(X1_train)
X1_predict<- predict(zip_Model, zipTest)
X1_actual = zipTest$X1
X1_test <- sqrt(mean((X1_actual - X1_predict)^2)) #RMSE Test
print(X1_test)
table(X1pred,zipTrain$X1)  # plotting confusion matrix
X1pred_test<-round(X1_pred_train)
table(X1pred_test,zipTest$X1)  # plotting confusion matrix
X1_predict<- predict(zip_Model, zipTest)
X1_actual = zipTest$X1
X1pred_test<-round(X1_pred_train)
table(X1pred_test,zipTest$X1)  # plotting confusion matrix
X1_test <- sqrt(mean((X1_actual - X1_predict)^2)) #RMSE Test
print(X1_test)
X1_actual = zipTest$X1
X1pred_test<-round(X1_predict)
table(X1pred_test,zipTest$X1)  # plotting confusion matrix
X1_test <- sqrt(mean((X1_actual - X1_predict)^2)) #RMSE Test
print(X1_test)
cor(zipTrain)
zip_Model <- lm(X1 ~ ., zipTrain) # Linear Regression model
print(zip_Model$coefficients)
plot(zip_Model)
X1_pred_train<- predict(zip_Model, zipTrain)
X1_actual_train = zipTrain$X1
X1pred<-round(X1_pred_train)
table(X1pred_test,zipTest$X1)  # plotting confusion matrix
X1pred_test
X1_predict
X1_actual
tail(zipTest,5)
zipTest[360,]
X1pred_test<-if (X1_predict>2.5) 3 else 2
table(X1pred_test,zipTest$X1)  # plotting confusion matrix
X1_test <- sqrt(mean((X1_actual - X1_predict)^2)) #RMSE Test
print(X1_test)
X1pred_test<- apply(X1_predict,2,function(zipTest)(if (zipTest>2.5) 3 else 2))
table(X1pred_test,zipTest$X1)  # plotting confusion matrix
X1_test <- sqrt(mean((X1_actual - X1_predict)^2)) #RMSE Test
print(X1_test)
X1pred_test<- apply(X1_predict,2,function(zipTest)(if ((round(zipTest,digits = 1)>2.5) 3 else 2))
table(X1pred_test,zipTest$X1)  # plotting confusion matrix
X1pred_test<- apply(X1_predict,2,function(zipTest)(if (zipTest>2.5) 3 else 2))
X1pred_test<- apply(as.matrix (X1_predict),2,function(zipTest)(if (zipTest>2.5) 3 else 2))
X1pred_test<- if (X1_predict >2.5 )3 else 2
X1pred_test<- apply(X1_predict,2,function(X1_predict)(if (X1_predict >2.5 )3 else 2))
X1pred_test<- sapply(X1_predict,2,function(X1_predict)(if (X1_predict >2.5 )3 else 2))
?sapply
X1pred_test<- sapply(X1_predict,function(X1_predict)(if (X1_predict >2.5 )3 else 2))
table(X1pred_test,zipTest$X1)  # plotting confusion matrix
X1pred_test
X1pred<-sapply(X1_pred_train,function(X1_pred_train)(if (X1_pred_train >2.5 )3 else 2))
table(X1pred,zipTrain$X1)
table(X1pred_test,zipTest$X1)
knn_1_pred <- as.numeric(as.character(knn_1_train))
table(knn_1_train,zipTrain$X1) # plotting confusion matrix for Knn=1 training data
table(knn_3_train,zipTrain$X1) # plotting confusion matrix for Knn=3 training data
table(knn_3_pred,zipTrain$X1) # plotting confusion matrix for Knn=3 training data
table(knn_3_train,zipTrain$X1) # plotting confusion matrix for Knn=3 training data
str(knn_3_train)
knn_3_train<-knn(train=zipTrain[,2:257],test=zipTrain[,2:257],cl = as.factor(zipTrain$X1),k=3) # Knn model for K=3
str(knn_3_train)
knn_3_pred <- as.numeric(as.character(knn_3_train))
RMSE_3_train <- sqrt(mean((knn_act - knn_3_pred)^2)) #RMSE Training for K=3
print(RMSE_3_train)
table(knn_3_train,zipTrain$X1)
# Read Dataset
library(readr)
zip_test <- read_delim("D:/UIC/Fall 2017/Advance stats/Assignments/Assignment1/zip.test.gz",
" ", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(zip_test)
library(readr)
zip_train <- read_delim("D:/UIC/Fall 2017/Advance stats/Assignments/Assignment1/zip.train.gz",
" ", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(zip_train)
zip_train <- zip_train[,1:257]    # cleaning the data
zipTrain <- subset(zip_train,subset=X1%in%c(2,3)) #Considering 2's and 3's
View(zipTrain)
zipTest <- subset(zip_test,subset=X1%in%c(2,3))   #Considering 2's and 3's
view(zipTest)
# Part 1: Linear Regresion
cor(zipTrain)
zip_Model <- lm(X1 ~ ., zipTrain) # Linear Regression model
print(zip_Model$coefficients)
summary(zip_Model)
par(mfrow = c(2,2))
plot(zip_Model)
X1_pred_train<- predict(zip_Model, zipTrain)
X1_actual_train = zipTrain$X1
X1_train <- sqrt(mean((X1_actual_train - X1_pred_train)^2))          #RMSE Training
print(X1_train)
X1pred<-sapply(X1_pred_train,function(X1_pred_train)(if (X1_pred_train >2.5 )3 else 2))
table(X1pred,zipTrain$X1)                                            # plotting confusion matrix for training
X1_predict<- predict(zip_Model, zipTest)
X1_actual = zipTest$X1
X1_test <- sqrt(mean((X1_actual - X1_predict)^2)) #RMSE Test
print(X1_test)
X1pred_test<- sapply(X1_predict,function(X1_predict)(if (X1_predict >2.5 )3 else 2))
table(X1pred_test,zipTest$X1)                                   # plotting confusion matrix for test
# Part 2: K-nearest neighbor
library(class)
knn_1_train<-knn(train=zipTrain[,2:257],test=zipTrain[,2:257],cl = as.factor(zipTrain$X1),k=1) # Knn model for K=1
knn_1_pred <- as.numeric(as.character(knn_1_train))
knn_act = zipTrain$X1
RMSE_1_train <- sqrt(mean((knn_act - knn_1_pred)^2)) #RMSE Training for K=1
print(RMSE_1_train)
table(knn_1_train,zipTrain$X1) # plotting confusion matrix for Knn=1 training data
knn_1<-knn(train=zipTrain[,2:257],test=zipTest[,2:257],cl = as.factor(zipTrain$X1),k=1) # Knn model for K=1
knn_1_predict <- as.numeric(as.character(knn_1))
summary(knn_1)
knn_actual = zipTest$X1
RMSE_1_test <- sqrt(mean((knn_actual - knn_1_predict)^2)) #RMSE Test for K=1
print(RMSE_1_test)
table(knn_1,zipTest$X1) # plotting confusion matrix for Knn=1 test data
knn_3_train<-knn(train=zipTrain[,2:257],test=zipTrain[,2:257],cl = as.factor(zipTrain$X1),k=3) # Knn model for K=3
str(knn_3_train)
knn_3_pred <- as.numeric(as.character(knn_3_train))
RMSE_3_train <- sqrt(mean((knn_act - knn_3_pred)^2)) #RMSE Training for K=3
print(RMSE_3_train)
table(knn_3_train,zipTrain$X1) # plotting confusion matrix for Knn=3 training data
knn_3<-knn(train=zipTrain[,2:257],test=zipTest[,2:257],cl = as.factor(zipTrain$X1),k=3) # Knn model for K=3
knn_3_predict <- as.numeric(as.character(knn_3))
RMSE_3_test<-sqrt(mean((knn_actual - knn_3_predict)^2)) #RMSE Test for K=3
print(RMSE_3_test)
table(knn_3,zipTest$X1) # plotting confusion matrix for Knn=3 test data
knn_5_train<-knn(train=zipTrain[,2:257],test=zipTrain[,2:257],cl = as.factor(zipTrain$X1),k=5) # Knn model for K=5
knn_5_pred <- as.numeric(as.character(knn_5_train))
RMSE_5_train <- sqrt(mean((knn_act - knn_5_pred)^2)) #RMSE Training for K=5
print(RMSE_5_train)
table(knn_5_train,zipTrain$X1) # plotting confusion matrix for Knn=5 training data
knn_5<-knn(train=zipTrain[,2:257],test=zipTest[,2:257],cl = as.factor(zipTrain$X1),k=5) # Knn model for K=5
knn_5_predict <- as.numeric(as.character(knn_5))
RMSE_5_test<-sqrt(mean((knn_actual - knn_5_predict)^2)) #RMSE Test for K=5
print(RMSE_5_test)
table(knn_5,zipTest$X1) # plotting confusion matrix for Knn=5 test data
knn_7_train<-knn(train=zipTrain[,2:257],test=zipTrain[,2:257],cl = as.factor(zipTrain$X1),k=7) # Knn model for K=7
knn_7_pred <- as.numeric(as.character(knn_7_train))
RMSE_7_train <- sqrt(mean((knn_act - knn_7_pred)^2)) #RMSE Training for K=7
print(RMSE_7_train)
table(knn_7_train,zipTrain$X1) # plotting confusion matrix for Knn=7 training data
knn_7<-knn(train=zipTrain[,2:257],test=zipTest[,2:257],cl = as.factor(zipTrain$X1),k=7) # Knn model for K=7
knn_7_predict <- as.numeric(as.character(knn_7))
RMSE_7_test<-sqrt(mean((knn_actual - knn_7_predict)^2)) #RMSE Test for K=7
print(RMSE_7_test)
table(knn_7,zipTest$X1) # plotting confusion matrix for Knn=7 test data
knn_15_train<-knn(train=zipTrain[,2:257],test=zipTrain[,2:257],cl = as.factor(zipTrain$X1),k=15) # Knn model for K=15
knn_15_pred <- as.numeric(as.character(knn_15_train))
RMSE_15_train <- sqrt(mean((knn_act - knn_15_pred)^2)) #RMSE Training for K=15
print(RMSE_15_train)
table(knn_15_train,zipTrain$X1) # plotting confusion matrix for Knn=15 training data
knn_15<-knn(train=zipTrain[,2:257],test=zipTest[,2:257],cl = as.factor(zipTrain$X1),k=15) # Knn model for K=15
knn_15_predict <- as.numeric(as.character(knn_15))
RMSE_15_test<-sqrt(mean((knn_actual - knn_15_predict)^2)) #RMSE Test for K=15
print(RMSE_15_test)
table(knn_15,zipTest$X1) # plotting confusion matrix for Knn=15 test data
RMSE_1_train <- mean(knn_act != knn_1_pred) #RMSE Training for K=1
print(RMSE_1_train)
RMSE_1_train <- mean(knn_act != knn_1_pred) #Errro rate of Training for K=1
print(RMSE_1_train)
RMSE_1_test <- mean(knn_actual != knn_1_predict) #Errro rate of Test for K=1
print(RMSE_1_test)
RMSE_3_train <- mean(knn_act != knn_3_pred) #Errro rate of Training for K=3
print(RMSE_3_train)
RMSE_3_test <- mean(knn_actual != knn_3_predict) #Errro rate of Test for K=3
print(RMSE_3_test)
RMSE_5_train <- mean(knn_act != knn_5_pred) #Errro rate of Training for K=5
print(RMSE_5_train)
RMSE_3_test <- mean(knn_actual != knn_3_predict) #Errro rate of Test for K=3
print(RMSE_3_test)
RMSE_5_test <- mean(knn_actual != knn_5_predict) #Errro rate of Test for K=5
print(RMSE_5_test)
RMSE_7_test <- mean(knn_actual != knn_7_predict) #Errro rate of Test for K=7
print(RMSE_7_test)
RMSE_7_train <- mean(knn_act != knn_7_pred) #Errro rate of Training for K=7
print(RMSE_7_train)
RMSE_15_train <- mean(knn_act != knn_15_pred) #Errro rate of Training for K=15
print(RMSE_15_train)
RMSE_15_test <- mean(knn_actual != knn_15_predict) #Errro rate of Test for K=7
print(RMSE_15_test)
RMSE_1_test <- mean(knn_actual == knn_1_predict) #Errro rate of Test for K=1
print(RMSE_1_test)
a<-knn_actual != knn_1_predict
a
a<-sum(knn_actual != knn_1_predict)
a
a<-sum(knn_actual == knn_1_predict)
a
str(Boston)
Boston<-data.frame(Boston)
dim(Boston)
head(Boston)
str(Boston)
summary(Boston)
library(MASS)
#?Boston
Boston<-data.frame(Boston)
dim(Boston)
head(Boston)
str(Boston)
summary(Boston)
?Boston
Auto_trans <- lm(mpg ~ .+log(weight)+I(acceleration^2), Auto[,-9])
summary(Auto_trans)
plot(Auto_trans)
library(corrplot)
# Read Dataset
Auto <- read.csv("D:/UIC/Fall 2017/Advance stats/Assignments/Assignment1/Auto.csv")
Auto <- read.csv(file.choose())
view(Auto)
# Describe Dataset
str(Auto)			# Check the type of each variable!
summary(Auto)		# Numerical Summaries
dim(Auto)			# How many observations are there?
head(Auto)
plot(Auto) # Scatterplot
Auto$horsepower <- as.numeric(Auto$horsepower) # Change the type of variable
cor(Auto[,-9])
corrplot(cor(Auto[,-9],use="complete.obs"),type="lower") # plotting correlation
# Linear Regression
Auto_model <- lm(mpg ~ ., Auto[,-9])
view(Auto_model)
summary(Auto_model)		# Summary statistics for the linear reg
par(mfrow = c(2,2))	# Put Multiple Plots on a Single Page
plot(Auto_model)				# Diagnostic plot of the linear regression
# part 2 studing the interaction effect
Auto_inter <- lm(mpg ~ .+weight*year+horsepower:acceleration+cylinders:displacement, Auto[,-9])
summary(Auto_inter)
# part 3
Auto_trans <- lm(mpg ~ .+log(weight)+I(acceleration^2), Auto[,-9])
summary(Auto_trans)
plot(Auto_trans)
# Read Dataset
library(readr)
zip_test <- read_delim("D:/UIC/Fall 2017/Advance stats/Assignments/Assignment1/zip.test.gz",
" ", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(zip_test)
library(readr)
zip_train <- read_delim("D:/UIC/Fall 2017/Advance stats/Assignments/Assignment1/zip.train.gz",
" ", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(zip_train)
zip_train <- zip_train[,1:257]    # cleaning the data
zipTrain <- subset(zip_train,subset=X1%in%c(2,3)) #Considering 2's and 3's
View(zipTrain)
zipTest <- subset(zip_test,subset=X1%in%c(2,3))   #Considering 2's and 3's
view(zipTest)
# Part 1: Linear Regresion
zip_Model <- lm(X1 ~ ., zipTrain) # Linear Regression model
#print(zip_Model$coefficients)
summary(zip_Model)
par(mfrow = c(2,2))
plot(zip_Model)
X1_pred_train<- predict(zip_Model, zipTrain)
X1_actual_train = zipTrain$X1
X1_train <- sqrt(mean((X1_actual_train - X1_pred_train)^2))          #RMSE Training
print(X1_train)
X1pred<-sapply(X1_pred_train,function(X1_pred_train)(if (X1_pred_train >2.5 )3 else 2))
table(X1pred,zipTrain$X1)                                            # plotting confusion matrix for training
X1_predict<- predict(zip_Model, zipTest)
X1_actual = zipTest$X1
X1_test <- sqrt(mean((X1_actual - X1_predict)^2)) #RMSE Test
print(X1_test)
X1pred_test<- sapply(X1_predict,function(X1_predict)(if (X1_predict >2.5 )3 else 2))
table(X1pred_test,zipTest$X1)                                   # plotting confusion matrix for test
# Part 2: K-nearest neighbor
library(class)
knn_1_train<-knn(train=zipTrain[,2:257],test=zipTrain[,2:257],cl = as.factor(zipTrain$X1),k=1) # Knn model for K=1
knn_1_pred <- as.numeric(as.character(knn_1_train))
knn_act = zipTrain$X1
table(knn_1_train,zipTrain$X1) # plotting confusion matrix for Knn=1 training data
RMSE_1_train <- mean(knn_act != knn_1_pred) #Errro rate of Training for K=1
print(RMSE_1_train)
knn_1<-knn(train=zipTrain[,2:257],test=zipTest[,2:257],cl = as.factor(zipTrain$X1),k=1) # Knn model for K=1
knn_1_predict <- as.numeric(as.character(knn_1))
summary(knn_1)
knn_actual = zipTest$X1
table(knn_1,zipTest$X1) # plotting confusion matrix for Knn=1 test data
RMSE_1_test <- mean(knn_actual != knn_1_predict) #Errro rate of Test for K=1
print(RMSE_1_test)
knn_3_train<-knn(train=zipTrain[,2:257],test=zipTrain[,2:257],cl = as.factor(zipTrain$X1),k=3) # Knn model for K=3
str(knn_3_train)
knn_3_pred <- as.numeric(as.character(knn_3_train))
table(knn_3_train,zipTrain$X1) # plotting confusion matrix for Knn=3 training data
RMSE_3_train <- mean(knn_act != knn_3_pred) #Errro rate of Training for K=3
print(RMSE_3_train)
knn_3<-knn(train=zipTrain[,2:257],test=zipTest[,2:257],cl = as.factor(zipTrain$X1),k=3) # Knn model for K=3
knn_3_predict <- as.numeric(as.character(knn_3))
table(knn_3,zipTest$X1) # plotting confusion matrix for Knn=3 test data
RMSE_3_test <- mean(knn_actual != knn_3_predict) #Errro rate of Test for K=3
print(RMSE_3_test)
knn_5_train<-knn(train=zipTrain[,2:257],test=zipTrain[,2:257],cl = as.factor(zipTrain$X1),k=5) # Knn model for K=5
knn_5_pred <- as.numeric(as.character(knn_5_train))
table(knn_5_train,zipTrain$X1) # plotting confusion matrix for Knn=5 training data
RMSE_5_train <- mean(knn_act != knn_5_pred) #Errro rate of Training for K=5
print(RMSE_5_train)
knn_5<-knn(train=zipTrain[,2:257],test=zipTest[,2:257],cl = as.factor(zipTrain$X1),k=5) # Knn model for K=5
knn_5_predict <- as.numeric(as.character(knn_5))
table(knn_5,zipTest$X1) # plotting confusion matrix for Knn=5 test data
RMSE_5_test <- mean(knn_actual != knn_5_predict) #Errro rate of Test for K=5
print(RMSE_5_test)
knn_7_train<-knn(train=zipTrain[,2:257],test=zipTrain[,2:257],cl = as.factor(zipTrain$X1),k=7) # Knn model for K=7
knn_7_pred <- as.numeric(as.character(knn_7_train))
table(knn_7_train,zipTrain$X1) # plotting confusion matrix for Knn=7 training data
RMSE_7_train <- mean(knn_act != knn_7_pred) #Errro rate of Training for K=7
print(RMSE_7_train)
knn_7<-knn(train=zipTrain[,2:257],test=zipTest[,2:257],cl = as.factor(zipTrain$X1),k=7) # Knn model for K=7
knn_7_predict <- as.numeric(as.character(knn_7))
table(knn_7,zipTest$X1) # plotting confusion matrix for Knn=7 test data
RMSE_7_test <- mean(knn_actual != knn_7_predict) #Errro rate of Test for K=7
print(RMSE_7_test)
knn_15_train<-knn(train=zipTrain[,2:257],test=zipTrain[,2:257],cl = as.factor(zipTrain$X1),k=15) # Knn model for K=15
knn_15_pred <- as.numeric(as.character(knn_15_train))
table(knn_15_train,zipTrain$X1) # plotting confusion matrix for Knn=15 training data
RMSE_15_train <- mean(knn_act != knn_15_pred) #Errro rate of Training for K=15
print(RMSE_15_train)
knn_15<-knn(train=zipTrain[,2:257],test=zipTest[,2:257],cl = as.factor(zipTrain$X1),k=15) # Knn model for K=15
knn_15_predict <- as.numeric(as.character(knn_15))
table(knn_15,zipTest$X1) # plotting confusion matrix for Knn=15 test data
RMSE_15_test <- mean(knn_actual != knn_15_predict) #Errro rate of Test for K=7
print(RMSE_15_test)
# Read data
library(MASS)
?Boston
Boston<-data.frame(Boston)
dim(Boston)
head(Boston)
str(Boston)
summary(Boston)
# part b: pairwise Scatterplots
pairs(Boston)
pairs(~crim+age+dis+black+medv,Boston)
pairs(~zn+indus+nox+age+lstat,Boston)
# part c: predictors associated with crime rate
par(mfrow=c(2,3))
plot(Boston$age, Boston$crim, main = "Age vs Crime")
plot(Boston$dis, Boston$crim, main = "Distance vs Crime")
plot(Boston$black, Boston$crim, main = "Black Population vs Crime")
plot(Boston$medv, Boston$crim, main = "Homes occupied by owners vs Crime")
plot(Boston$lstat, Boston$crim, main = "Low status vs Crime")
plot(Boston$ptratio, Boston$crim, main = "Pupil-Teachers ration vs Crime")
Sub_Boston<-(Boston[Boston$crim>4,]) #selecting suburbs who have crime rate > 4
dim(Sub_Boston)
nrow(Sub_Boston[Sub_Boston$black>200,])/nrow(Sub_Boston) # percentage of black population where crime rate > 4
range(Boston[Boston$crim>4,]$tax)
range(Boston[Boston$crim>4,]$ptratio)
range(Boston[Boston$crim>4,]$lstat)
# part d
par(mfrow=c(2,2))
hist(Boston$crim)
boxplot(Boston$crim)
nrow(Boston[Boston$crim>20,])
nrow(Boston[Boston$crim>6,])/nrow(Boston)
range(Boston$tax)
hist(Boston$tax)
range(Boston[Boston$crim>20,]$tax)
range(Boston$ptratio)
hist(Boston$ptratio)
range(Boston[Boston$crim>20,]$ptratio)
# Part e: find # of suburbs in this data set bound to the Charles river
nrow(Boston[Boston$chas==1,]) # number of suburbs near charles river
# Part f: median pupil-teacher ratio among the towns
median(Boston$ptratio)
# Part g
summary(Boston[Boston$medv==min(Boston$medv),])
# part h
nrow(Boston[Boston$rm>7,])
nrow(Boston[Boston$rm>8,])
summary(Boston[Boston$rm>8,])
