set.seed(23)
train = sample (1: nrow(CS ), nrow(CS )/2)
CS_train<-CS[train,]
CS_test<-CS[-train,]
# Fitting a Regression Tree
tree.CS <- tree(Sales ~ ., data = CS_train)
summary(tree.CS)
plot(tree.CS)
text(tree.CS, pretty = 0)
yhat<-predict(tree.CS,newdata=CS_test)
MSE<-mean((yhat - CS_test$Sales)^2)
MSE
#Cross Validation
cv.CS<-cv.tree(tree.CS)
plot(cv.CS$size, cv.CS$dev, type = "b")
tree.min <- which.min(cv.CS$dev)
points(tree.min, cv.CS$dev[tree.min], col = "red", cex = 2, pch = 20)
library(ISLR)
library(tree)
library (randomForest)
CS<-data.frame(Carseats)
summary(CS)
str(CS)
head(CS)
# Spliting the data into Training and Test data into 60-40%
set.seed(25)
train = sample (1: nrow(CS ), nrow(CS )/2)
CS_train<-CS[train,]
CS_test<-CS[-train,]
# Fitting a Regression Tree
tree.CS <- tree(Sales ~ ., data = CS_train)
summary(tree.CS)
plot(tree.CS)
text(tree.CS, pretty = 0)
yhat<-predict(tree.CS,newdata=CS_test)
MSE<-mean((yhat - CS_test$Sales)^2)
MSE
#Cross Validation
cv.CS<-cv.tree(tree.CS)
plot(cv.CS$size, cv.CS$dev, type = "b")
tree.min <- which.min(cv.CS$dev)
points(tree.min, cv.CS$dev[tree.min], col = "red", cex = 2, pch = 20)
library(ISLR)
library(tree)
library (randomForest)
CS<-data.frame(Carseats)
summary(CS)
str(CS)
head(CS)
# Spliting the data into Training and Test data into 60-40%
set.seed(25)
train = sample (1: nrow(CS ), nrow(CS )/2)
CS_train<-CS[train,]
CS_test<-CS[-train,]
# Fitting a Regression Tree
tree.CS <- tree(Sales ~ ., data = CS_train)
summary(tree.CS)
plot(tree.CS)
text(tree.CS, pretty = 0)
yhat<-predict(tree.CS,newdata=CS_test)
MSE<-mean((yhat - CS_test$Sales)^2)
MSE
#Cross Validation
cv.CS<-cv.tree(tree.CS)
plot(cv.CS$size, cv.CS$dev, type = "b")
tree.min <- which.min(cv.CS$dev)
points(tree.min, cv.CS$dev[tree.min], col = "red", cex = 2, pch = 20)
tree.min
cv.CS$dev[tree.min]
tree.min
cv.CS$dev
cv.CS$dev[tree.min]
cv.CS$dev
plot(cv.CS$size, cv.CS$dev, type = "b")
?plot
plot(cv.CS$size, cv.CS$dev, type = "c")
cv.CS$dev
library(ISLR)
library(tree)
library (randomForest)
CS<-data.frame(Carseats)
summary(CS)
str(CS)
head(CS)
# Spliting the data into Training and Test data into 60-40%
set.seed(23)
train = sample (1: nrow(CS ), nrow(CS )/2)
CS_train<-CS[train,]
CS_test<-CS[-train,]
# Fitting a Regression Tree
tree.CS <- tree(Sales ~ ., data = CS_train)
summary(tree.CS)
plot(tree.CS)
text(tree.CS, pretty = 0)
yhat<-predict(tree.CS,newdata=CS_test)
MSE<-mean((yhat - CS_test$Sales)^2)
MSE
#Cross Validation
cv.CS<-cv.tree(tree.CS)
plot(cv.CS$size, cv.CS$dev, type = "c")
tree.min <- which.min(cv.CS$dev)
points(tree.min, cv.CS$dev[tree.min], col = "red", cex = 2, pch = 20)
library(ISLR)
library(tree)
library (randomForest)
CS<-data.frame(Carseats)
summary(CS)
str(CS)
head(CS)
# Spliting the data into Training and Test data into 60-40%
set.seed(23)
train = sample (1: nrow(CS ), nrow(CS )/2)
CS_train<-CS[train,]
CS_test<-CS[-train,]
# Fitting a Regression Tree
tree.CS <- tree(Sales ~ ., data = CS_train)
summary(tree.CS)
plot(tree.CS)
text(tree.CS, pretty = 0)
yhat<-predict(tree.CS,newdata=CS_test)
MSE<-mean((yhat - CS_test$Sales)^2)
MSE
#Cross Validation
cv.CS<-cv.tree(tree.CS)
plot(cv.CS$size, cv.CS$dev, type = "c")
library(ISLR)
library(tree)
library (randomForest)
CS<-data.frame(Carseats)
summary(CS)
str(CS)
head(CS)
# Spliting the data into Training and Test data into 60-40%
set.seed(25)
train = sample (1: nrow(CS ), nrow(CS )/2)
CS_train<-CS[train,]
CS_test<-CS[-train,]
# Fitting a Regression Tree
tree.CS <- tree(Sales ~ ., data = CS_train)
summary(tree.CS)
plot(tree.CS)
text(tree.CS, pretty = 0)
yhat<-predict(tree.CS,newdata=CS_test)
MSE<-mean((yhat - CS_test$Sales)^2)
MSE
#Cross Validation
cv.CS<-cv.tree(tree.CS)
plot(cv.CS$size, cv.CS$dev, type = "c")
library(ISLR)
library(tree)
library (randomForest)
CS<-data.frame(Carseats)
summary(CS)
str(CS)
head(CS)
# Spliting the data into Training and Test data into 60-40%
set.seed(25)
train = sample (1: nrow(CS ), nrow(CS )/2)
CS_train<-CS[train,]
CS_test<-CS[-train,]
# Fitting a Regression Tree
tree.CS <- tree(Sales ~ ., data = CS_train)
summary(tree.CS)
plot(tree.CS)
text(tree.CS, pretty = 0)
yhat<-predict(tree.CS,newdata=CS_test)
MSE<-mean((yhat - CS_test$Sales)^2)
MSE
#Cross Validation
cv.CS<-cv.tree(tree.CS)
plot(cv.CS$size, cv.CS$dev, type = "b")
library(ISLR)
library(tree)
library (randomForest)
CS<-data.frame(Carseats)
summary(CS)
str(CS)
head(CS)
# Spliting the data into Training and Test data into 60-40%
set.seed(25)
train = sample (1: nrow(CS ), nrow(CS )*0.6)
CS_train<-CS[train,]
CS_test<-CS[-train,]
# Fitting a Regression Tree
tree.CS <- tree(Sales ~ ., data = CS_train)
summary(tree.CS)
plot(tree.CS)
text(tree.CS, pretty = 0)
yhat<-predict(tree.CS,newdata=CS_test)
MSE<-mean((yhat - CS_test$Sales)^2)
MSE
#Cross Validation
cv.CS<-cv.tree(tree.CS)
plot(cv.CS$size, cv.CS$dev, type = "b")
library(ISLR)
library(tree)
library (randomForest)
CS<-data.frame(Carseats)
summary(CS)
str(CS)
head(CS)
# Spliting the data into Training and Test data into 60-40%
set.seed(25)
train = sample (1: nrow(CS ), nrow(CS )*0.6)
CS_train<-CS[train,]
CS_test<-CS[-train,]
# Fitting a Regression Tree
tree.CS <- tree(Sales ~ ., data = CS_train)
summary(tree.CS)
plot(tree.CS)
text(tree.CS, pretty = 0)
yhat<-predict(tree.CS,newdata=CS_test)
MSE<-mean((yhat - CS_test$Sales)^2)
MSE
#Cross Validation
cv.CS<-cv.tree(tree.CS)
plot(cv.CS$size, cv.CS$dev, type = "b")
points(tree.min, cv.carseats$dev[tree.min], col = "red", cex = 2, pch = 20)
cv.CS<-cv.tree(tree.CS)
plot(cv.CS$size, cv.CS$dev, type = "b")
points(tree.min, cv.CS$dev[tree.min], col = "red", cex = 2, pch = 20)
#Cross Validation
set.seed(25)
cv.CS<-cv.tree(tree.CS)
plot(cv.CS$size, cv.CS$dev, type = "b")
points(tree.min, cv.CS$dev[tree.min], col = "red", cex = 2, pch = 20)
#Cross Validation
set.seed(25)
cv.CS<-cv.tree(tree.CS)
plot(cv.CS$size, cv.CS$dev, type = "b")
points(tree.min, cv.CS$dev[tree.min], col = "red", cex = 2, pch = 20)
#Cross Validation
set.seed(25)
cv.CS<-cv.tree(tree.CS)
plot(cv.CS$size, cv.CS$dev, type = "b")
points(tree.min, cv.CS$dev[tree.min], col = "red", cex = 2, pch = 20)
#Cross Validation
set.seed(25)
cv.CS<-cv.tree(tree.CS)
plot(cv.CS$size, cv.CS$dev, type = "b")
points(tree.min, cv.CS$dev[tree.min], col = "red", cex = 2, pch = 20)
#Cross Validation
set.seed(25)
cv.CS<-cv.tree(tree.CS)
plot(cv.CS$size, cv.CS$dev, type = "b")
tree.min <- which.min(cv.carseats$dev)
points(tree.min, cv.CS$dev[tree.min], col = "red", cex = 2, pch = 20)
cv.CS<-cv.tree(tree.CS)
plot(cv.CS$size, cv.CS$dev, type = "b")
tree.min <- which.min(cv.carseats$dev)
points(tree.min, cv.CS$dev[tree.min], col = "red", cex = 2, pch = 20)
plot(cv.CS$k, cv.CS$dev, type = "b")
tree.min <- which.min(cv.carseats$dev)
points(tree.min, cv.CS$dev[tree.min], col = "red", cex = 2, pch = 20)
cv.CS<-cv.tree(tree.CS)
plot(cv.CS$size, cv.CS$dev, type = "b")
tree.min <- which.min(cv.CS$dev)
points(tree.min, cv.CS$dev[tree.min], col = "red", cex = 2, pch = 20)
plot(cv.CS$k, cv.CS$dev, type = "b")
tree.min <- which.min(cv.CS$dev)
points(tree.min, cv.CS$dev[tree.min], col = "red", cex = 2, pch = 20)
prune.CS <- prune.tree(tree.CS, best = 9)
plot(prune.CS)
text(prune.CS, pretty = 0)
yhat <- predict(prune.CS, newdata = CS_test)
mean((yhat - CS_test$Sales)^2)
# Fitting a Regression Tree
tree.CS <- tree(Sales ~ ., data = CS_train)
summary(tree.CS)
plot(tree.CS)
text(tree.CS, pretty = 0)
yhat<-predict(tree.CS,newdata=CS_test)
MSE<-mean((yhat - CS_test$Sales)^2)
MSE
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 3, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
importance(RF.CS)
Bag.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 10, ntree = 500, importance = TRUE)
yhat.Bag <- predict(Bag.CS, newdata = CS_test)
mean((yhat.Bag - CS_test$Sales)^2)
importance(Bag.CS)
CS<-data.frame(Carseats)
summary(CS)
str(CS)
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 5, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
#Random Forest
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 3, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
importance(RF.CS)
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 8, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
for (i in 3:9)
{
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = i, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
i=i+1
}
#Random Forest
for (i in 3:9)
{
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = i, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
MSE<-mean((yhat.RF - CS_test$Sales)^2)
MSE
i=i+1
}
MSE
i=3
for (i in 3:9)
{
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = i, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
MSE<-mean((yhat.RF - CS_test$Sales)^2)
MSE
i=i+1
}
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 3, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
MSE<-mean((yhat.RF - CS_test$Sales)^2)
MSE
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 8, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 2, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 9, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 2, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 2, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 8, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 9, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 5, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 10, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
library(ISLR)
library(tree)
library (randomForest)
CS<-data.frame(Carseats)
summary(CS)
str(CS)
head(CS)
# Spliting the data into Training and Test data into 60-40%
set.seed(25)
train = sample (1: nrow(CS ), nrow(CS )*0.6)
CS_train<-CS[train,]
CS_test<-CS[-train,]
# Fitting a Regression Tree
tree.CS <- tree(Sales ~ ., data = CS_train)
summary(tree.CS)
plot(tree.CS)
text(tree.CS, pretty = 0)
yhat<-predict(tree.CS,newdata=CS_test)
MSE<-mean((yhat - CS_test$Sales)^2)
MSE
#Cross Validation
cv.CS<-cv.tree(tree.CS)
plot(cv.CS$size, cv.CS$dev, type = "b")
tree.min <- which.min(cv.CS$dev)
points(tree.min, cv.CS$dev[tree.min], col = "red", cex = 2, pch = 20)
prune.CS <- prune.tree(tree.CS, best = 9)
plot(prune.CS)
text(prune.CS, pretty = 0)
yhat <- predict(prune.CS, newdata = CS_test)
mean((yhat - CS_test$Sales)^2)
# Bagging Approch
Bag.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 10, ntree = 500, importance = TRUE)
yhat.Bag <- predict(Bag.CS, newdata = CS_test)
mean((yhat.Bag - CS_test$Sales)^2)
importance(Bag.CS)
#Random Forest
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 3, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
MSE<-mean((yhat.RF - CS_test$Sales)^2)
MSE
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 2, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 5, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 10, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
library(ISLR)
library(tree)
library (randomForest)
CS<-data.frame(Carseats)
summary(CS)
str(CS)
head(CS)
# Spliting the data into Training and Test data into 60-40%
set.seed(25)
train = sample (1: nrow(CS ), nrow(CS )/2)
CS_train<-CS[train,]
CS_test<-CS[-train,]
# Fitting a Regression Tree
tree.CS <- tree(Sales ~ ., data = CS_train)
summary(tree.CS)
plot(tree.CS)
text(tree.CS, pretty = 0)
yhat<-predict(tree.CS,newdata=CS_test)
MSE<-mean((yhat - CS_test$Sales)^2)
MSE
#Cross Validation
cv.CS<-cv.tree(tree.CS)
plot(cv.CS$size, cv.CS$dev, type = "b")
tree.min <- which.min(cv.CS$dev)
points(tree.min, cv.CS$dev[tree.min], col = "red", cex = 2, pch = 20)
prune.CS <- prune.tree(tree.CS, best = 9)
plot(prune.CS)
text(prune.CS, pretty = 0)
yhat <- predict(prune.CS, newdata = CS_test)
mean((yhat - CS_test$Sales)^2)
# Bagging Approch
Bag.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 10, ntree = 500, importance = TRUE)
yhat.Bag <- predict(Bag.CS, newdata = CS_test)
mean((yhat.Bag - CS_test$Sales)^2)
importance(Bag.CS)
#Random Forest
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 3, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
MSE<-mean((yhat.RF - CS_test$Sales)^2)
MSE
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 2, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 5, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 10, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
library(ISLR)
library(tree)
library (randomForest)
CS<-data.frame(Carseats)
summary(CS)
str(CS)
head(CS)
# Spliting the data into Training and Test data into 60-40%
set.seed(25)
train = sample (1: nrow(CS ), nrow(CS )/2)
CS_train<-CS[train,]
CS_test<-CS[-train,]
# Fitting a Regression Tree
tree.CS <- tree(Sales ~ ., data = CS_train)
summary(tree.CS)
plot(tree.CS)
text(tree.CS, pretty = 0)
yhat<-predict(tree.CS,newdata=CS_test)
MSE<-mean((yhat - CS_test$Sales)^2)
MSE
#Cross Validation
cv.CS<-cv.tree(tree.CS)
plot(cv.CS$size, cv.CS$dev, type = "b")
prune.CS <- prune.tree(tree.CS, best = 9)
plot(prune.CS)
text(prune.CS, pretty = 0)
yhat <- predict(prune.CS, newdata = CS_test)
mean((yhat - CS_test$Sales)^2)
prune.CS <- prune.tree(tree.CS, best = 8)
plot(prune.CS)
text(prune.CS, pretty = 0)
yhat <- predict(prune.CS, newdata = CS_test)
mean((yhat - CS_test$Sales)^2)
Bag.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 10, ntree = 500, importance = TRUE)
yhat.Bag <- predict(Bag.CS, newdata = CS_test)
mean((yhat.Bag - CS_test$Sales)^2)
importance(Bag.CS)
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 3, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
MSE<-mean((yhat.RF - CS_test$Sales)^2)
MSE
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 2, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 5, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 10, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 3, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
MSE<-mean((yhat.RF - CS_test$Sales)^2)
MSE
importance(RF.CS)
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 8, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
RF.CS <- randomForest(Sales ~ ., data = CS_train, mtry = 9, ntree = 500, importance = TRUE)
yhat.RF <- predict(RF.CS, newdata = CS_test)
mean((yhat.RF - CS_test$Sales)^2)
